version: 2.1

jobs:
  build_debian_upgrade_from_community:
    parameters:
      docker_image:
        type: string
      # We run it before running any commands during preparation phase for systemd enabled Docker container
      systemd_prepare_command:
        type: string
        default: "true"
      machine_image:
        type: string
        default: "ubuntu-2204:current"
    machine:
      image: << parameters.machine_image >>
    steps:
      - checkout
        # Prepare image with systemd enabled
      - run: echo -e "FROM << parameters.docker_image >>\n"                          >  Dockerfile
      - run: echo -e "ENV DEBIAN_FRONTEND noninteractive\n"                          >> Dockerfile
      - run: echo -e "RUN << parameters.systemd_prepare_command >>\n"                >> Dockerfile
      - run: echo -e "RUN apt-get update; apt-get install -y systemd systemd-sysv\n" >> Dockerfile
      - run: echo -e "CMD [\"/lib/systemd/systemd\"]"                                >> Dockerfile
      - run: cat Dockerfile | sudo docker build --tag debian_systemd -
      - run:
          name: "Deploy new systemd enabled image"
          command: sudo docker run -d --privileged --cap-add SYS_ADMIN  --name linux_systemd_container debian_systemd /lib/systemd/systemd
      - run: sudo docker ps -a
      - run: sudo docker exec -it linux_systemd_container systemctl status --no-pager
      - run: sudo docker exec -it linux_systemd_container apt install -y wget
      - run: sudo docker exec -it linux_systemd_container wget https://install.fastnetmon.com/installer?random-argument-to-disable-caching-$CIRCLE_WORKFLOW_JOB_ID -Oinstaller
      - run: sudo docker exec -it linux_systemd_container chmod +x installer
      - run: sudo docker exec --env "CI=true" -it linux_systemd_container ./installer -install_community_edition
      - run: sudo docker exec --env "CI=true" -it linux_systemd_container ./installer -do_not_check_license
      - run: sudo docker exec --env -it linux_systemd_container ldd /opt/fastnetmon/app/bin/fastnetmon
      - run: sudo docker exec --env -it linux_systemd_container cat /var/log/fastnetmon/fastnetmon.log
      - run: sudo docker exec --env -it linux_systemd_container systemctl status fastnetmon
      - run: sudo docker exec --env -it linux_systemd_container ldd /opt/fastnetmon/app/bin/traffic_db
      - run: sudo docker exec --env -it linux_systemd_container ldd /opt/fastnetmon/app/bin/fill_dictionaries
      - run: sudo docker exec --env -it linux_systemd_container /opt/fastnetmon/app/bin/fastnetmon --configuration_check
      - run: sudo docker exec --env -it linux_systemd_container fcli show fastnetmon_version
      - run: sudo docker exec --env -it linux_systemd_container fcli show main
      - run: sudo docker exec --env -it linux_systemd_container fcli show hostgroup
      - run: sudo docker exec --env "CI=true" -it linux_systemd_container ./installer -install_graphic_stack -do_not_check_license
      - run: sudo docker exec --env "CI=true" -it linux_systemd_container ./installer -import_community_edition_configuration
  build_debian_ipv6:
    machine:
      image: ubuntu-2204:current
    parameters:
      docker_image:
        type: string
      installer_arguments:
        type: string
        default: ""
      visual_installer_arguments:
        type: string
        default: ""
      # We run it before running any commands during preparation phase for systemd enabled Docker container
      systemd_prepare_command:
        type: string
        default: "true"
      database_check_command:
        type: string
        default: "mongod --version"
      resource_class:
        type: string
        default: large
      installer_file_name:
        type: string
        default: installer
    resource_class: << parameters.resource_class >>
    steps:
      - checkout
      - run: sudo apt-get update
      - run: sudo apt-get install -y net-tools
      - run: ifconfig
      # Enable IPv6 for Docker: https://circleci.com/docs/faq/#ipv6-in-tests
      - run:
          name: enable ipv6
          command: |
            cat \<<'EOF' | sudo tee /etc/docker/daemon.json
            {
              "ipv6": true,
              "fixed-cidr-v6": "2001:db8:1::/64"
            }
            EOF
            sudo service docker restart
        # Prepare image with systemd enabled
      - run: echo -e "FROM << parameters.docker_image >>\n"                          >  Dockerfile
      - run: echo -e "ENV DEBIAN_FRONTEND noninteractive\n"                          >> Dockerfile
      - run: echo -e "RUN << parameters.systemd_prepare_command >>\n"                >> Dockerfile
      - run: echo -e "RUN apt-get update; apt-get install -y systemd systemd-sysv\n" >> Dockerfile
      - run: echo -e "CMD [\"/lib/systemd/systemd\"]"                                >> Dockerfile
      - run: cat Dockerfile | sudo docker build --tag debian_systemd -
      - run: sudo apt-get update
      - run: sudo apt-get install -y net-tools
      - run: ifconfig
      - run:
          name: "Deploy new systemd enabled image"
          command: sudo docker run -d --privileged --cap-add SYS_ADMIN  --name linux_systemd_container debian_systemd /lib/systemd/systemd
      - run: sudo docker ps -a
      - run: sudo docker exec -it linux_systemd_container systemctl status --no-pager
      - run: sudo docker exec -it linux_systemd_container apt install -y wget net-tools
      - run: sudo docker exec -it linux_systemd_container ifconfig
      - run: sudo docker exec -it linux_systemd_container wget https://install.fastnetmon.com/<< parameters.installer_file_name >>?random-argument-to-disable-caching-$CIRCLE_WORKFLOW_JOB_ID -Oinstaller
      - run: sudo docker exec -it linux_systemd_container chmod +x installer
      - run: sudo docker exec --env "CI=true" -it linux_systemd_container ./installer -do_not_check_license << parameters.installer_arguments >>
      - run: sudo docker exec --env -it linux_systemd_container ldd /opt/fastnetmon/app/bin/fastnetmon
      - run: sudo docker exec --env -it linux_systemd_container cat /var/log/fastnetmon/fastnetmon.log
      - run: sudo docker exec --env -it linux_systemd_container systemctl status fastnetmon
      - run: sudo docker exec --env -it linux_systemd_container << parameters.database_check_command >>
      - run: sudo docker exec --env -it linux_systemd_container ldd /opt/fastnetmon/app/bin/traffic_db
      - run: sudo docker exec --env -it linux_systemd_container ldd /opt/fastnetmon/app/bin/fill_dictionaries
      - run: sudo docker exec --env -it linux_systemd_container /opt/fastnetmon/app/bin/fastnetmon --configuration_check
      - run: sudo docker exec --env -it linux_systemd_container fcli show fastnetmon_version
      - run: sudo docker exec --env -it linux_systemd_container fcli show main
      - run: sudo docker exec --env -it linux_systemd_container fcli show hostgroup
      - run:
          name: Check TCP listens for FastNetMon and database
          command: sudo docker exec --env -it linux_systemd_container netstat -lnpt
      - run:
          name: Check UDP listens for FastNetMon and database
          command: sudo docker exec --env -it linux_systemd_container netstat -lnpu
      - run: sudo docker exec --env "CI=true" -it linux_systemd_container ./installer -install_graphic_stack -do_not_check_license << parameters.visual_installer_arguments >>
      - run:
          name: Check TCP listens for all daemons
          command: sudo docker exec --env -it linux_systemd_container netstat -lnpt
      - run:
          name: Check UDP listens for all daemons
          command: sudo docker exec --env -it linux_systemd_container netstat -lnpu
  build_debian:
    parameters:
      docker_image:
        type: string
      installer_arguments:
        type: string
        default: ""
      # We run it before running any commands during preparation phase for systemd enabled Docker container
      systemd_prepare_command:
        type: string
        default: "true"
      database_check_command:
        type: string
        default: "mongod --version"
      resource_class:
        type: string
        default: large
      installer_file_name:
        type: string
        default: installer
      mount_cgroup_command:
        type: string
        default: ""
      machine_image:
        type: string
        default: "ubuntu-2204:current"
      visual_installer_command:
        type: string
        default: "./installer -install_graphic_stack -do_not_check_license"
    machine:
      image: << parameters.machine_image >>
    resource_class: << parameters.resource_class >>
    steps:
      - checkout
        # Prepare image with systemd enabled
      - run: sudo docker version
      - run: echo -e "FROM << parameters.docker_image >>\n"                          >  Dockerfile
      - run: echo -e "ENV DEBIAN_FRONTEND noninteractive\n"                          >> Dockerfile
      - run: echo -e "RUN << parameters.systemd_prepare_command >>\n"                >> Dockerfile
      - run: echo -e "RUN apt-get update; apt-get install -y systemd systemd-sysv\n" >> Dockerfile
      - run: echo -e "CMD [\"/lib/systemd/systemd\"]"                                >> Dockerfile
      - run: cat Dockerfile | sudo docker build --tag debian_systemd -
      - run: sudo apt-get update
      - run: sudo apt-get install -y net-tools
      - run: ifconfig
      - run:
          name: "Deploy new systemd enabled image"
          command: sudo docker run -d --privileged --cap-add SYS_ADMIN << parameters.mount_cgroup_command >> --name linux_systemd_container debian_systemd /lib/systemd/systemd
      - run: sudo docker ps -a
      - run: sudo docker exec -it linux_systemd_container systemctl status --no-pager
      - run: sudo docker exec -it linux_systemd_container apt install -y wget net-tools
      - run: sudo docker exec -it linux_systemd_container ifconfig
      - run: sudo docker exec -it linux_systemd_container wget https://install.fastnetmon.com/<< parameters.installer_file_name >>?random-argument-to-disable-caching-$CIRCLE_WORKFLOW_JOB_ID -Oinstaller
      - run: sudo docker exec -it linux_systemd_container chmod +x installer
      - run: sudo docker exec --env "CI=true" -it linux_systemd_container ./installer -do_not_check_license << parameters.installer_arguments >>
      - run: sudo docker exec --env -it linux_systemd_container ldd /opt/fastnetmon/app/bin/fastnetmon 
      - run: 
          name: Sleep to give enough time for FastNetMon to start
          command: sleep 25
      - run: sudo docker exec --env -it linux_systemd_container cat /var/log/fastnetmon/fastnetmon.log
      - run: sudo docker exec --env -it linux_systemd_container systemctl status fastnetmon
      - run: sudo docker exec --env -it linux_systemd_container << parameters.database_check_command >>
      - run: sudo docker exec --env -it linux_systemd_container ldd /opt/fastnetmon/app/bin/traffic_db
      - run: sudo docker exec --env -it linux_systemd_container ldd /opt/fastnetmon/app/bin/fill_dictionaries
      - run: sudo docker exec --env -it linux_systemd_container /opt/fastnetmon/app/bin/fastnetmon --configuration_check
      - run: sudo docker exec --env -it linux_systemd_container fcli show fastnetmon_version
      - run: sudo docker exec --env -it linux_systemd_container fcli show main
      - run: sudo docker exec --env -it linux_systemd_container fcli show hostgroup
      - run:
          name: Check TCP listens for FastNetMon and database
          command: sudo docker exec --env -it linux_systemd_container netstat -lnpt
      - run:
          name: Check UDP listens for FastNetMon and database
          command: sudo docker exec --env -it linux_systemd_container netstat -lnpu
      - run: sudo docker exec --env "CI=true" -it linux_systemd_container << parameters.visual_installer_command >>
      - run:
          name: Check TCP listens for all daemons
          command: sudo docker exec --env -it linux_systemd_container netstat -lnpt
      - run:
          name: Check UDP listens for all daemons
          command: sudo docker exec --env -it linux_systemd_container netstat -lnpu
  build_debian_panel:
    parameters:
      docker_image:
        type: string
      installer_arguments:
        type: string
        default: ""
      # We run it before running any commands during preparation phase for systemd enabled Docker container
      systemd_prepare_command:
        type: string
        default: "true"
      database_check_command:
        type: string
        default: "mongod --version"
      resource_class:
        type: string
        default: large
      installer_file_name:
        type: string
        default: installer
      machine_image:
        type: string
        default: "ubuntu-2204:current"
    machine:
      image: << parameters.machine_image >>
    resource_class: << parameters.resource_class >>
    steps:
      - checkout
        # Prepare image with systemd enabled
      - run: echo -e "FROM << parameters.docker_image >>\n"                          >  Dockerfile
      - run: echo -e "ENV DEBIAN_FRONTEND noninteractive\n"                          >> Dockerfile
      - run: echo -e "RUN << parameters.systemd_prepare_command >>\n"                >> Dockerfile
      - run: echo -e "RUN apt-get update; apt-get install -y systemd systemd-sysv\n" >> Dockerfile
      - run: echo -e "CMD [\"/lib/systemd/systemd\"]"                                >> Dockerfile
      - run: cat Dockerfile | sudo docker build --tag debian_systemd -
      - run: sudo apt-get update
      - run: sudo apt-get install -y net-tools
      - run: ifconfig
      - run:
          name: "Deploy new systemd enabled image"
          command: sudo docker run -d --privileged --cap-add SYS_ADMIN  --name linux_systemd_container debian_systemd /lib/systemd/systemd
      - run: sudo docker ps -a
      - run: sudo docker exec -it linux_systemd_container systemctl status --no-pager
      - run: sudo docker exec -it linux_systemd_container apt install -y wget net-tools
      - run: sudo docker exec -it linux_systemd_container ifconfig
      - run: sudo docker exec -it linux_systemd_container wget https://install.fastnetmon.com/<< parameters.installer_file_name >>?random-argument-to-disable-caching-$CIRCLE_WORKFLOW_JOB_ID -Oinstaller
      - run: sudo docker exec -it linux_systemd_container chmod +x installer
      - run: sudo docker exec --env "CI=true" -it linux_systemd_container ./installer -do_not_check_license << parameters.installer_arguments >>
      - run: sudo docker exec --env -it linux_systemd_container ldd /opt/fastnetmon/app/bin/fastnetmon 
      - run: 
          name: Sleep to give enough time for FastNetMon to start
          command: sleep 25
      - run: sudo docker exec --env -it linux_systemd_container cat /var/log/fastnetmon/fastnetmon.log
      - run: sudo docker exec --env -it linux_systemd_container systemctl status fastnetmon
      - run: sudo docker exec --env -it linux_systemd_container << parameters.database_check_command >>
      - run: sudo docker exec --env -it linux_systemd_container ldd /opt/fastnetmon/app/bin/traffic_db
      - run: sudo docker exec --env -it linux_systemd_container ldd /opt/fastnetmon/app/bin/fill_dictionaries
      - run: sudo docker exec --env -it linux_systemd_container /opt/fastnetmon/app/bin/fastnetmon --configuration_check
      - run: sudo docker exec --env -it linux_systemd_container fcli show fastnetmon_version
      - run: sudo docker exec --env -it linux_systemd_container fcli show main
      - run: sudo docker exec --env -it linux_systemd_container fcli show hostgroup
      - run:
          name: Check TCP listens for FastNetMon and database
          command: sudo docker exec --env -it linux_systemd_container netstat -lnpt
      - run:
          name: Check UDP listens for FastNetMon and database
          command: sudo docker exec --env -it linux_systemd_container netstat -lnpu
      - run: sudo docker exec --env "CI=true" -it linux_systemd_container ./installer -install_traffic_persistency -do_not_check_license
      - run:
          name: Check TCP listens for all daemons
          command: sudo docker exec --env -it linux_systemd_container netstat -lnpt
      - run:
          name: Check UDP listens for all daemons
          command: sudo docker exec --env -it linux_systemd_container netstat -lnpu
      - run:
          name: FastNetMon Manager Panel
          command: sudo docker exec --env "CI=true" -it linux_systemd_container ./installer -install_fastnetmon_manager
  build_redhat:
    parameters:
      docker_image:
        type: string
      installer_arguments:
        type: string
        default: ""
      database_check_command:
        type: string
        default: "mongod --version"
      mount_cgroup_command:
        type: string
        default: ""
    machine:
      image: ubuntu-2204:current
    steps:
      - run: sudo docker version
      - run: sudo docker run -d --privileged --cap-add SYS_ADMIN << parameters.mount_cgroup_command >> --name linux_systemd_container << parameters.docker_image >> /sbin/init
      - run: sudo docker ps -a
      - run: sudo docker exec -it linux_systemd_container systemctl status --no-pager
      - run: sudo docker exec -it linux_systemd_container yum install -y wget
      - run:
          name: "Download installer, for CentOS 7 we have issue with Let's encrypt and we need to skip certificate validation"
          command: sudo docker exec -it linux_systemd_container wget --no-check-certificate https://install.fastnetmon.com/installer?random-argument-to-disable-caching-$CIRCLE_WORKFLOW_JOB_ID -Oinstaller
      - run: sudo docker exec -it linux_systemd_container chmod +x installer
      - run: sudo docker exec --env "CI=true" -it linux_systemd_container ./installer -do_not_check_license << parameters.installer_arguments >>
      - run: sudo docker exec --env -it linux_systemd_container ldd /opt/fastnetmon/app/bin/fastnetmon
      - run: sudo docker exec --env -it linux_systemd_container cat /var/log/fastnetmon/fastnetmon.log
      - run: sudo docker exec --env -it linux_systemd_container systemctl status fastnetmon
      - run: sudo docker exec --env -it linux_systemd_container << parameters.database_check_command >>
      - run: sudo docker exec --env -it linux_systemd_container ldd /opt/fastnetmon/app/bin/traffic_db
      - run: sudo docker exec --env -it linux_systemd_container ldd /opt/fastnetmon/app/bin/fill_dictionaries
      - run: sudo docker exec --env -it linux_systemd_container /opt/fastnetmon/app/bin/fastnetmon --configuration_check
      - run: sudo docker exec --env -it linux_systemd_container fcli show fastnetmon_version
      - run: sudo docker exec --env -it linux_systemd_container fcli show main
      - run: sudo docker exec --env -it linux_systemd_container fcli show hostgroup
      - run: sudo docker exec --env "CI=true" -it linux_systemd_container ./installer -install_graphic_stack -do_not_check_license
  #
  # It's pure legacy 
  # https://github.com/docker/for-mac/issues/7190
  # https://www.jeffgeerling.com/blog/2022/docker-and-systemd-getting-rid-dreaded-failed-connect-bus-error
  # https://github.com/systemd/systemd/issues/19760#issuecomment-851565075
  # 
  build_redhat_7_legacy:
    parameters:
      docker_image:
        type: string
      installer_arguments:
        type: string
        default: ""
      database_check_command:
        type: string
        default: "mongod --version"
      mount_cgroup_command:
        type: string
        default: ""
    machine:
      image: ubuntu-2204:current
    steps:
      - run: sudo docker version
      # As first step please build Docker container with modern systemd which will work with fresh Ubuntu
      - run: echo -e "FROM centos:centos7\n"                          >  Dockerfile
      # It's repo with modern systemd https://maciej.lasyk.info/2016/Dec/16/systemd-231-latest-in-centos-7-thx-to-facebook/
      - run: echo -e "RUN  curl https://copr.fedorainfracloud.org/coprs/jsynacek/systemd-backports-for-centos-7/repo/epel-7/jsynacek-systemd-backports-for-centos-7-epel-7.repo -o /etc/yum.repos.d/jsynacek-systemd-centos-7.repo\n" >> Dockerfile
        # CentOS 7 is EOL and we need to fix repos to be able to install anything
      - run: echo -e "RUN sed -i '/mirrorlist/d' /etc/yum.repos.d/CentOS-Base.repo\n" >> Dockerfile
      - run: echo -e "RUN sed -i 's/#baseurl/baseurl/' /etc/yum.repos.d/CentOS-Base.repo\n" >> Dockerfile
      - run: echo -e "RUN sed -i 's/mirror.centos.org/vault.centos.org/' /etc/yum.repos.d/CentOS-Base.repo\n" >> Dockerfile
      - run: echo -e "RUN yum update systemd -y\n" >> Dockerfile
      - run: echo -e "CMD [\"/sbin/init\"]"                                >> Dockerfile
      - run: cat Dockerfile | sudo docker build --tag centos_systemd -
      - run: sudo docker run -d --privileged --cap-add SYS_ADMIN << parameters.mount_cgroup_command >> --name linux_systemd_container centos_systemd /sbin/init
      - run: sudo docker ps -a
      - run: sudo docker exec -it linux_systemd_container systemctl status --no-pager
      - run: sudo docker exec -it linux_systemd_container yum install -y wget
      - run:
          name: "Download installer, for CentOS 7 we have issue with Let's encrypt and we need to skip certificate validation"
          command: sudo docker exec -it linux_systemd_container wget --no-check-certificate https://install.fastnetmon.com/installer?random-argument-to-disable-caching-$CIRCLE_WORKFLOW_JOB_ID -Oinstaller
      - run: sudo docker exec -it linux_systemd_container chmod +x installer
      - run: sudo docker exec --env "CI=true" -it linux_systemd_container ./installer -do_not_check_license << parameters.installer_arguments >>
      - run: sudo docker exec --env -it linux_systemd_container ldd /opt/fastnetmon/app/bin/fastnetmon
      - run: sudo docker exec --env -it linux_systemd_container cat /var/log/fastnetmon/fastnetmon.log
      - run: sudo docker exec --env -it linux_systemd_container systemctl status fastnetmon
      - run: sudo docker exec --env -it linux_systemd_container << parameters.database_check_command >>
      - run: sudo docker exec --env -it linux_systemd_container ldd /opt/fastnetmon/app/bin/traffic_db
      - run: sudo docker exec --env -it linux_systemd_container ldd /opt/fastnetmon/app/bin/fill_dictionaries
      - run: sudo docker exec --env -it linux_systemd_container /opt/fastnetmon/app/bin/fastnetmon --configuration_check
      - run: sudo docker exec --env -it linux_systemd_container fcli show fastnetmon_version
      - run: sudo docker exec --env -it linux_systemd_container fcli show main
      - run: sudo docker exec --env -it linux_systemd_container fcli show hostgroup
      - run: sudo docker exec --env "CI=true" -it linux_systemd_container ./installer -install_graphic_stack -do_not_check_license

  build_redhat_upgrade_from_community:
    parameters:
      docker_image:
        type: string
      installer_arguments:
        type: string
        default: ""
    machine:
      image: ubuntu-2204:current
    steps:
      - run: sudo docker run -d --privileged --cap-add SYS_ADMIN  --name linux_systemd_container << parameters.docker_image >> /sbin/init
      - run: sudo docker ps -a
      - run: sudo docker exec -it linux_systemd_container systemctl status --no-pager
      - run: sudo docker exec -it linux_systemd_container yum install -y wget
      - run:
          name: "Download installer, for CentOS 7 we have issue with Let's encrypt and we need to skip certificate validation"
          command: sudo docker exec -it linux_systemd_container wget --no-check-certificate https://install.fastnetmon.com/installer?random-argument-to-disable-caching-$CIRCLE_WORKFLOW_JOB_ID -Oinstaller
      - run: sudo docker exec -it linux_systemd_container chmod +x installer
      - run: sudo docker exec --env "CI=true" -it linux_systemd_container ./installer -install_community_edition
      - run: sudo docker exec --env "CI=true" -it linux_systemd_container ./installer -do_not_check_license << parameters.installer_arguments >>
      - run: sudo docker exec --env -it linux_systemd_container ldd /opt/fastnetmon/app/bin/fastnetmon
      - run: sudo docker exec --env -it linux_systemd_container cat /var/log/fastnetmon/fastnetmon.log
      - run: sudo docker exec --env -it linux_systemd_container systemctl status fastnetmon
      - run: sudo docker exec --env -it linux_systemd_container mongod --version
      - run: sudo docker exec --env -it linux_systemd_container ldd /opt/fastnetmon/app/bin/traffic_db
      - run: sudo docker exec --env -it linux_systemd_container ldd /opt/fastnetmon/app/bin/fill_dictionaries
      - run: sudo docker exec --env -it linux_systemd_container /opt/fastnetmon/app/bin/fastnetmon --configuration_check
      - run: sudo docker exec --env -it linux_systemd_container fcli show fastnetmon_version
      - run: sudo docker exec --env -it linux_systemd_container fcli show main
      - run: sudo docker exec --env -it linux_systemd_container fcli show hostgroup
      - run: sudo docker exec --env "CI=true" -it linux_systemd_container ./installer -install_graphic_stack -do_not_check_license 
  ubuntu_vm:
    parameters:
      machine_image:
        type: string
        default: "ubuntu-2204:current"
    machine:
      image: << parameters.machine_image >>
    steps:
      - run: sudo apt-get update
      - run: sudo DEBIAN_FRONTEND=noninteractive apt-get install -y wget systemd
      - run: wget https://install.fastnetmon.com/installer?random-argument-to-disable-caching-$CIRCLE_WORKFLOW_JOB_ID -Oinstaller
      - run: chmod +x installer
      - run: sudo CI=true ./installer -do_not_check_license
      - store_artifacts:
          path: /tmp/fastnetmon_install.log
      - run: ldd /opt/fastnetmon/app/bin/fastnetmon
      - run: ldd /opt/fastnetmon/app/bin/traffic_db
      - run: ldd /opt/fastnetmon/app/bin/fill_dictionaries
      - run: sudo /opt/fastnetmon/app/bin/fastnetmon --configuration_check
      - store_artifacts:
          path: /var/log/fastnetmon/fastnetmon.log
      - run: sudo systemctl status fastnetmon --no-pager
      - run: sudo fcli show fastnetmon_version
      - run: sudo fcli show main
      - run: sudo fcli show hostgroup
      - run: sudo CI=true ./installer -install_graphic_stack -do_not_check_license
  ubuntu2004vm_docker:
    machine:
      image: ubuntu-2004:current
    steps:
      - run: sudo apt-get update
      - run: sudo DEBIAN_FRONTEND=noninteractive apt-get install -y wget
      - run: wget https://install.fastnetmon.com/installer?random-argument-to-disable-caching-$CIRCLE_WORKFLOW_JOB_ID -Oinstaller
      - run: chmod +x installer
      - run: sudo CI=true ./installer -fastnetmon_docker
      - store_artifacts:
          path: /tmp/fastnetmon_install.log
      - run: sudo chmod -R 755 /var/lib/fastnetmon_docker # make permissions more relaxed to get log file as artifact
      - store_artifacts:
          path: /var/lib/fastnetmon_docker/fastnetmon/logs/fastnetmon.log
      - run: sudo fcli show fastnetmon_version
      - run: sudo fcli show main
      - run: sudo fcli show hostgroup

# Declare jobs we will run for each commit and nightly
common_jobs: &common_jobs
  # These tasks run on bare VM directly provided by CirclCI
  - ubuntu_vm:
      name: "Ubuntu 22.04 on VM"
      machine_image: "ubuntu-2204:current"
  - ubuntu_vm:
      name: "Ubuntu 20.04 on VM"
      machine_image: "ubuntu-2204:current"
  - ubuntu2004vm_docker
  - build_redhat_7_legacy:
      name: "CentOS 7"
      docker_image: "centos:centos7"
  - build_redhat:
      name: "AlmaLinux 8"
      docker_image: "almalinux:8"
  - build_redhat:
      name: "AlmaLinux 9"
      docker_image: "almalinux:9"
  - build_redhat_7_legacy:
      name: "CentOS 7 FerretDB"
      docker_image: "centos:centos7"
      installer_arguments: "-ferretdb"
      database_check_command: "/usr/bin/ferretdb --version"
  - build_redhat:
      name: "AlmaLinux 8 FerretDB"
      docker_image: "almalinux:8"
      installer_arguments: "-ferretdb"
      database_check_command: "/usr/bin/ferretdb --version"
  - build_redhat:
      name: "AlmaLinux 9 FerretDB"
      docker_image: "almalinux:9"
      installer_arguments: "-ferretdb"
      database_check_command: "/usr/bin/ferretdb --version"
  - build_redhat_7_legacy:
      name: "CentOS 7 developer"
      docker_image: "centos:centos7"
      installer_arguments: "-developer_version"
  - build_redhat:
      name: "AlmaLinux 8 developer"
      docker_image: "almalinux:8"
      installer_arguments: "-developer_version"
  - build_redhat:
      name: "AlmaLinux 9 developer"
      docker_image: "almalinux:9"
      installer_arguments: "-developer_version"
  - build_redhat_7_legacy:
      name: "CentOS 7 FerretDB developer"
      docker_image: "centos:centos7"
      installer_arguments: "-developer_version -ferretdb"
      database_check_command: "/usr/bin/ferretdb --version"
  - build_redhat:
      name: "AlmaLinux 8 FerretDB developer"
      docker_image: "almalinux:8"
      installer_arguments: "-developer_version -ferretdb"
      database_check_command: "/usr/bin/ferretdb --version"
  - build_redhat:
      name: "AlmaLinux 9 FerretDB developer"
      docker_image: "almalinux:9"
      installer_arguments: "-developer_version -ferretdb"
      database_check_command: "/usr/bin/ferretdb --version"
  - build_redhat_upgrade_from_community:
      name: "AlmaLinux 8 upgrade from community"
      docker_image: "almalinux:8"
  - build_redhat_upgrade_from_community:
      name: "AlmaLinux 9 upgrade from community"
      docker_image: "almalinux:9"
  - build_debian:
      name: "Debian 11"
      docker_image: "debian:11"
  - build_debian:
      name: "Debian 11 FerretDB"
      docker_image: "debian:11"
      installer_arguments: "-ferretdb"
      database_check_command: "/usr/bin/ferretdb --version"
  - build_debian:
      name: "Debian 12"
      docker_image: "debian:12"
  - build_debian:
      name: "Debian 12 old cpus"
      docker_image: "debian:12"
      installer_arguments: "-force_old_cpu"
      # In this case installer installs FerretDB instead of MongoDB and we need to check it
      database_check_command: "/usr/bin/ferretdb --version"
  - build_debian:
      name: "Debian 12 FerretDB"
      docker_image: "debian:12"
      installer_arguments: "-ferretdb"
      database_check_command: "/usr/bin/ferretdb --version"
  - build_debian_upgrade_from_community:
      name: "Debian 11 upgrade from community"
      docker_image: "debian:11"
  - build_debian:
      name: "ubuntu 18.04"
      docker_image: "ubuntu:18.04"
  - build_debian:
      name: "ubuntu 18.04 FerretDB"
      docker_image: "ubuntu:18.04"
      installer_arguments: "-ferretdb"
      database_check_command: "/usr/bin/ferretdb --version"
  - build_debian:
      name: "ubuntu 20.04"
      docker_image: "ubuntu:20.04"
  - build_debian:
      name: "ubuntu 20.04 FerretDB"
      docker_image: "ubuntu:20.04"
      installer_arguments: "-ferretdb"
      database_check_command: "/usr/bin/ferretdb --version"
  - build_debian:
      name: "ubuntu 22.04"
      docker_image: "ubuntu:22.04"
  - build_debian_panel:
      name: "ubuntu 22.04 with Panel"
      docker_image: "ubuntu:22.04"
      machine_image: "ubuntu-2204:current"
# We do not have ionCube for 8.3
#  - build_debian_panel:
#      name: "ubuntu 24.04 with Panel"
#      docker_image: "ubuntu:24.04"
#      database_check_command: "/usr/bin/ferretdb --version"
  - build_debian:
      name: "ubuntu 22.04 FerretDB"
      docker_image: "ubuntu:22.04"
      installer_arguments: "-ferretdb"
      database_check_command: "/usr/bin/ferretdb --version"
  - build_debian:
      name: "ubuntu 24.04 FerretDB"
      docker_image: "ubuntu:24.04"
      installer_arguments: "-ferretdb"
      database_check_command: "/usr/bin/ferretdb --version"
  - build_debian_upgrade_from_community:
      name: "ubuntu 18.04 upgrade from community"
      docker_image: "ubuntu:18.04"
  - build_debian_upgrade_from_community:
      name: "ubuntu 20.04 upgrade from community" 
      docker_image: "ubuntu:20.04"
  - build_debian_upgrade_from_community:
      name: "ubuntu 22.04 upgrade from community"
      docker_image: "ubuntu:22.04"
  - build_debian_upgrade_from_community:
      name: "ubuntu 24.04 upgrade from community"
      docker_image: "ubuntu:24.04"
  - build_debian:
      name: "Debian 11 developer"
      docker_image: "debian:11"
      installer_arguments: "-developer_version"
  - build_debian:
      name: "Debian 12 developer"
      docker_image: "debian:12"
      installer_arguments: "-developer_version"
  - build_debian:
      name: "Debian 11 FerretDB developer"
      docker_image: "debian:11"
      installer_arguments: "-developer_version -ferretdb"
      database_check_command: "/usr/bin/ferretdb --version"
  - build_debian:
      name: "Debian 12 FerretDB developer"
      docker_image: "debian:12"
      installer_arguments: "-developer_version -ferretdb" 
      database_check_command: "/usr/bin/ferretdb --version"
  - build_debian:
      name: "ubuntu 18.04 developer"
      docker_image: "ubuntu:18.04"
      installer_arguments: "-developer_version"
  - build_debian:
      name: "ubuntu 20.04 developer"
      docker_image: "ubuntu:20.04"
      installer_arguments: "-developer_version"
  - build_debian:
      name: "ubuntu 22.04 developer"
      docker_image: "ubuntu:22.04"
      installer_arguments: "-developer_version"
  - build_debian:
      name: "ubuntu 24.04 developer"
      docker_image: "ubuntu:24.04"
      installer_arguments: "-developer_version"
      # In this case installer installs FerretDB instead of MongoDB and we need to check it
      database_check_command: "/usr/bin/ferretdb --version"
  - build_debian:
      name: "ubuntu 22.04 ARM developer"
      docker_image: "ubuntu:22.04"
      installer_arguments: "-developer_version"
      resource_class: "arm.large"
      installer_file_name: "installer_arm64"
  - build_debian: 
      name: "ubuntu 24.04 ARM developer"
      docker_image: "ubuntu:24.04"
      installer_arguments: "-developer_version" 
      resource_class: "arm.large"
      installer_file_name: "installer_arm64"
      database_check_command: "/usr/bin/ferretdb --version"
  - build_debian:
      name: "ubuntu 18.04 FerretDB developer"
      docker_image: "ubuntu:18.04"
      installer_arguments: "-developer_version -ferretdb"
      database_check_command: "/usr/bin/ferretdb --version"
  - build_debian:
      name: "ubuntu 20.04 FerretDB developer"
      docker_image: "ubuntu:20.04"
      installer_arguments: "-developer_version -ferretdb"
      database_check_command: "/usr/bin/ferretdb --version"
  - build_debian:
      name: "ubuntu 22.04 FerretDB developer"
      docker_image: "ubuntu:22.04"
      installer_arguments: "-developer_version -ferretdb"
      database_check_command: "/usr/bin/ferretdb --version"
  - build_debian:
      name: "ubuntu 24.04 FerretDB developer"
      docker_image: "ubuntu:24.04"
      installer_arguments: "-developer_version -ferretdb"
      database_check_command: "/usr/bin/ferretdb --version"
  - build_debian:
      name: "ubuntu 22.04 ARM FerretDB developer"
      docker_image: "ubuntu:22.04"
      installer_arguments: "-developer_version -ferretdb"
      resource_class: "arm.large"
      installer_file_name: "installer_arm64"
      database_check_command: "/usr/bin/ferretdb --version"
  - build_debian_panel:
      name: "ubuntu 22.04 ARM FerretDB developer with Panel"
      docker_image: "ubuntu:22.04"
      installer_arguments: "-developer_version -ferretdb"
      resource_class: "arm.large"
      installer_file_name: "installer_arm64"
      database_check_command: "/usr/bin/ferretdb --version"
  - build_debian:
      name: "ubuntu 24.04 ARM FerretDB developer"
      docker_image: "ubuntu:24.04"
      installer_arguments: "-developer_version -ferretdb"
      resource_class: "arm.large"
      installer_file_name: "installer_arm64"
      database_check_command: "/usr/bin/ferretdb --version"
  - build_debian_ipv6:
      name: "ubuntu 22.04 ARM FerretDB IPv6 developer"
      docker_image: "ubuntu:22.04"
      installer_arguments: "-developer_version -ferretdb"
      resource_class: "arm.large"
      installer_file_name: "installer_arm64"
      database_check_command: "/usr/bin/ferretdb --version"
  - build_debian_ipv6:
      name: "ubuntu 22.04 ARM FerretDB IPv6 only developer"
      docker_image: "ubuntu:22.04"
      installer_arguments: "-developer_version -ferretdb -ipv6_only_setup"
      visual_installer_arguments: "-ipv6_only_setup"
      resource_class: "arm.large"
      installer_file_name: "installer_arm64"
      database_check_command: "/usr/bin/ferretdb --version"
  - build_redhat_7_legacy:
      name: "CentOS 7 old cpus"
      docker_image: "centos:centos7"
      installer_arguments: "-force_old_cpu"
      # In this case installer installs FerretDB instead of MongoDB and we need to check it
      database_check_command: "/usr/bin/ferretdb --version"
  - build_redhat:
      name: "AlmaLinux 8 old cpus"
      docker_image: "almalinux:8"
      installer_arguments: "-force_old_cpu"
      # In this case installer installs FerretDB instead of MongoDB and we need to check it
      database_check_command: "/usr/bin/ferretdb --version"
  - build_redhat:
      name: "AlmaLinux 9 old cpus"
      docker_image: "almalinux:9"
      installer_arguments: "-force_old_cpu"
      # In this case installer installs FerretDB instead of MongoDB and we need to check it
      database_check_command: "/usr/bin/ferretdb --version"
  - build_debian:
      name: "Debian 11 old cpus"
      docker_image: "debian:11"
      installer_arguments: "-force_old_cpu"
      # In this case installer installs FerretDB instead of MongoDB and we need to check it
      database_check_command: "/usr/bin/ferretdb --version"
  - build_debian:
      name: "ubuntu 18.04 old cpus"
      docker_image: "ubuntu:18.04"
      installer_arguments: "-force_old_cpu"
      # In this case installer installs FerretDB instead of MongoDB and we need to check it
      database_check_command: "/usr/bin/ferretdb --version"
  - build_debian:
      name: "ubuntu 20.04 old cpus"
      docker_image: "ubuntu:20.04"
      installer_arguments: "-force_old_cpu"
      # In this case installer installs FerretDB instead of MongoDB and we need to check it
      database_check_command: "/usr/bin/ferretdb --version"
  - build_debian:
      name: "ubuntu 22.04 old cpus"
      docker_image: "ubuntu:22.04"
      installer_arguments: "-force_old_cpu"
      # In this case installer installs FerretDB instead of MongoDB and we need to check it
      database_check_command: "/usr/bin/ferretdb --version"
  - build_debian:
      name: "ubuntu 24.04 old cpus"
      docker_image: "ubuntu:24.04"
      installer_arguments: "-force_old_cpu"
      # In this case installer installs FerretDB instead of MongoDB and we need to check it
      database_check_command: "/usr/bin/ferretdb --version"
  - build_debian_upgrade_from_community:
      name: "ubuntu 20.04 upgrade from community"
      docker_image: "ubuntu:20.04"
  - build_debian:
      name: "ubuntu 22.04"
      docker_image: "ubuntu:22.04"
  - build_debian:
      name: "ubuntu 24.04"
      docker_image: "ubuntu:24.04"
      # In this case installer installs FerretDB instead of MongoDB and we need to check it
      database_check_command: "/usr/bin/ferretdb --version"

# We have two different workflows to trigger same tasks on commit and nightly
workflows:
  version: 2
  all_distros_nightly:
    jobs:
      *common_jobs
    triggers:
      - schedule:
          cron: "0 2 * * *"
          filters:
            branches:
              only:
                - main
  all_distros:
    jobs:
      *common_jobs


